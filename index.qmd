---
title:  Using AI to draft Project Proposal
subtitle: Technical Approach Paper for Multi-Agent AI System
date: today
author: Edouard Legoupil, Chief Data Officer, IOM
format: quarto_iom_article-html
project:
  type: website
jupyter: python3
kernel: project_drafter_kernel  # Must match the name above
execute:
  engine: jupyter
  eval: true
toc: true
---

A Multi-Agent AI System is a computational framework where multiple autonomous agents interact to solve complex problems beyond the capability of individual agents. These systems are inspired by natural systems (e.g., human teams, ant colonies) and exhibit:

- __Autonomy__: Agents operate independently with their own goals and decision-making.

- __Decentralization__: No single point of control—coordination emerges through interaction.

- __Collaboration__: Agents communicate, negotiate, or compete to achieve objectives.

- __Scalability__: Tasks can be distributed dynamically across agents.

Multi-agent systems add significant value to AI-driven project proposal drafting by leveraging specialized agents to handle distinct tasks such as content generation, compliance checks, and reviews. 

This collaborative approach ensures high accuracy, efficiency, and scalability, resulting in polished and competitive proposals. By automating repetitive tasks and iteratively improving content, multi-agent systems enhance the overall quality and speed of the proposal drafting process.


# Introduction

This notebook is designed for the audience to understand the basics of multi-agents systems so that they can effectively contribute to the collaborative work required to create them. We use [CrewAI](https://www.crewai.com/), an open source framework for building autonomous AI agents that work together to accomplish tasks. Basically, the 4 key steps are:  

1. Define Your __Agents__: Agents are AI workers with roles, goals, and tools.

2. Create __Tasks__: Tasks define what each agent should do.

3. Assemble the __Crew__: Combine agents and tasks into a team.

4. Run the system: Execute and __kickoff__ the workflow.

------------------------------------------------------------------------

## Environment Set up

The body of this document targets a technical audience. Below are all the codes so that the whole process can be reproduced and audited. This assume to use the following code within [Visual Studio Code](https://code.visualstudio.com/).

First we need to use a virtual environment in Python development. This is essential for managing dependencies, avoiding conflicts, and ensuring reproducibility. It allows you to isolate project-specific libraries and versions, preventing interference with other projects or the global Python installation. This isolation helps maintain a clean development environment, simplifies project setup for collaborators, and enhances security by reducing the risk of introducing vulnerabilities. Overall, virtual environments provide a consistent and organized way to manage your Python projects effectively.

Make sure to install the last [stable version of python language](https://www.python.org/downloads/) and create a dedicated python environment to have a fresh install where to manage correctly all the dependencies between packages. To specify a particular version of Python when creating a virtual environment, you can use the full path to the desired Python executable. Here is how you can do it:

Open your terminal (Command Prompt, PowerShell, or any terminal emulator).

Navigate to your project directory where you want to create the virtual environment.

Run the following command to create a virtual environment,here called **`.venv`**:

> python -m venv .venv

Then, activate the virtual environment:

> .\.venv\Scripts\activate

Then, configure visual Studio Code to use the virtual environment: Open the Command Palette using the shortcut `Ctrl+Shift+P` and type `Jupyter: Select Interpreter` and select the interpreter that corresponds to your newly created virtual environment: `('venv': venv)`.

Once this environment selected as a kernel to run the notebook, we can install the required python modules the rest of the process:

```{python} 
#| eval: false
%pip install --upgrade --quiet  python_docx
%pip install --upgrade --quiet  dotenv 
%pip install --upgrade --quiet  langchain_openai
%pip install --upgrade --quiet  langchain_ollama
```

Install `CrewAI` and Explore the [documentation](https://docs.crewai.com/introduction)

```{python}
#| eval: false
%pip install --upgrade --quiet  crewai 
```

then Restart the jupyter kernel for this notebook
```{python}
#| eval: false
%reset -f
```

## Setting up LLM API 

### Using Azure Open AI

https://blog.crewai.com/configuring-azure-openai-with-crewai-a-comprehensive-guide/

Note that it is key to get the environment variable precisely [as expected by litellm](https://docs.litellm.ai/docs/providers/azure)

```{python}
import os
from dotenv import load_dotenv
# Load environment variables (Assuming you store API keys in a .env file)
load_dotenv()
 
# Set all required environment variables explicitly
os.environ["AZURE_API_TYPE"] = "azure"
os.environ["AZURE_API_BASE"] = os.getenv("AZURE_OPENAI_ENDPOINT")
os.environ["AZURE_API_KEY"] = os.getenv("AZURE_OPENAI_API_KEY")
os.environ["AZURE_API_VERSION"] = os.getenv("OPENAI_API_VERSION")
os.environ["AZURE_DEPLOYMENT_NAME"] = os.getenv("AZURE_DEPLOYMENT_NAME")

# Print all relevant variables for debugging
# Verify endpoint format - it MUST end with a forward slash
#print("AZURE_OPENAI_ENDPOINT:",  "set" if os.getenv("AZURE_OPENAI_ENDPOINT") else "not set")
#print("AZURE_OPENAI_API_KEY:", "set" if os.getenv("AZURE_OPENAI_API_KEY") else "not set")
#print("AZURE_DEPLOYMENT_NAME:", os.getenv("AZURE_DEPLOYMENT_NAME"))
#print("OPENAI_API_VERSION:", os.getenv("OPENAI_API_VERSION"))

# Configuring AzureChatOpenAI client...
from langchain_openai import AzureChatOpenAI
llm_azure = AzureChatOpenAI(
    azure_deployment=os.getenv("AZURE_DEPLOYMENT_NAME"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    api_version=os.getenv("OPENAI_API_VERSION") ,
    model=f"azure/{os.getenv('AZURE_DEPLOYMENT_NAME')}",
    max_retries=3,
    timeout=30,
    temperature=0.67,  # Adjust based on requirements
    max_tokens=10000  # Adjust based on requirements
)

# Example usage
response = llm_azure.invoke("""If you have to create a humanitarian project proposal, 
                               what are the key steps you would start and decision point
                              you need before starting writing the document?""")
print(response.content) 
```

Setting up API key can be an issue, use the below chunk for debugging.
```{python}
#| eval: false
from crewai import LLM
import os
import litellm
litellm._turn_on_debug()
azure_llm = LLM(
    model=f"azure/{os.getenv('AZURE_DEPLOYMENT_NAME')}",
)
azure_response = azure_llm.call(
    "If you have to create a humanitarian project proposal, what are the key steps you would start and decision point you need before starting writing the document?"
)
print(f'\nAzure Response:\n\n{azure_response}\n')
```

# First Iteration: 2 agents 

To start with we define 2 agents that work in a sequential way, one is drafting the report and the second one review it.

```{python}
from crewai import Crew, Agent, Task, Process

# ================= AGENTS =================
proposal_writer = Agent(
    role="Humanitarian Proposal Writer",
    llm= llm_azure,
    goal="Write compelling funding proposals for humanitarian projects",
    backstory=(
        "You are an expert in humanitarian aid and grant writing. "
        "You have 10+ years of experience drafting proposals"
        "and know how to structure them for maximum impact."
    ),
    verbose=True,
    allow_delegation=False
)

proposal_reviewer = Agent(
    role="Proposal Quality Assurance Specialist",
    llm=llm_azure,
    goal="Ensure proposals meet funding criteria, follows strict formatting and content requirements and are well-structured",
    backstory=(
        "You are a grant evaluator for major humanitarian organizations. "
        "You have a deep knowledge of donor expectations and proposal evaluation criteria."
        "You are meticulous about formatting, word limits, and logical flow."
        "You know exactly what funders look for and how to improve proposals."
    ),
    verbose=True,
    allow_delegation=False
)

# ================= TASKS =================
write_proposal = Task(
    description=(
        "Write a detailed project proposal for a humanitarian funding request. "
        "The project aims to provide develop the usage of AI to improve IOM efficiency when drafting project proposal. "
        "Include: Problem Statement, Objectives, Methodology, Budget, and Expected Impact."
    ),
    expected_output=(
        "A well-structured 2-page proposal document with clear sections: "
        "1. Introduction & Problem Statement "
        "2. Project Objectives "
        "3. Methodology & Implementation Plan "
        "4. Budget Breakdown "
        "5. Expected Outcomes & Sustainability"
    ),
    agent=proposal_writer,
)

review_proposal = Task(
    description=(
        "Critically review the proposal draft and suggest improvements. "
        "Ensure clarity, alignment with donor expectations, and no errors."
    ),
    expected_output=(
        "A revised proposal with tracked changes and recommendations. "
        "A short summary of key improvements made."
    ),
    agent=proposal_reviewer,
)

# ================= CREW CONFIGURATION =================
crew = Crew(
    agents=[proposal_writer, proposal_reviewer],
    tasks=[write_proposal, review_proposal],
    process=Process.sequential,  # First write, then review
    verbose=True  
)

# ================= EXECUTION =================
result1 = crew.kickoff()
print("✅ Proposal 1 generated successfully!")
print(result1)
```

# Second Iteration: 3 agents

Now we can add more agents with a manager to coordinate them.

We can also some key elements of the system (projectDescription, fundingOrg, projectDuration, budgetRange, targetRegion) as parameters.

```{python}
from crewai import Agent, Task, Crew, Process

# ================= PROJECT PARAMETERS =================
projectDescription = "Develop the usage of AI to improve IOM efficiency when drafting project proposals."
fundingOrg = "International Organization for Migration (IOM)"
projectDuration = "12 months"
budgetRange = "$130,000"
targetRegion = "Headquarter/Global"

# ================= AGENTS =================
manager_agent = Agent(
    role="Proposal Manager",
    goal="Oversee proposal quality and coherence",
    backstory=(
        f"You are an expert in humanitarian aid and grant writing. "
        f"You have 10+ years of experience drafting proposals and "
        f"know how to structure them for maximum impact. You coordinate the "
        f"creation of a detailed project proposal for a humanitarian funding request. "
        f"The project aims to {projectDescription} "
        f"with funding from {fundingOrg}."
    ),
    llm=llm_azure,
    verbose=True
)

context_analyst = Agent(
    role="Context Specialist",
    goal="Analyze project background and needs",
    backstory=(
        f"You are a UN humanitarian needs assessment expert. "
        f"You specialize in analyzing humanitarian trends and identifying "
        f"funding opportunities in {targetRegion}."
    ),
    llm=llm_azure,
    verbose=True
)

design_lead = Agent(
    role="Program Designer",
    goal="Develop project framework and logic",
    backstory=(
        f"You are an IOM program architect specializing in logical frameworks. "
        f"You design projects that align with donor priorities and "
        f"focus on long-term impact within {targetRegion}."
    ),
    llm=llm_azure,
    verbose=True
)

m_e_specialist = Agent(
    role="M&E Coordinator",
    goal="Design monitoring and evaluation systems",
    backstory=(
        f"You are a WHO monitoring specialist with results-based management expertise. "
        f"You ensure that project outcomes align with funding requirements from {fundingOrg} "
        f"and that KPIs reflect {projectDuration} of project activities."
    ),
    llm=llm_azure,
    verbose=True
)

# ================= TASKS =================
summary_task = Task(
    description=(
        f"Draft a 350-word project summary following IOM standards. "
        f"Ensure the summary includes the project context, objectives, "
        f"theory of change, and expected outcomes for {targetRegion}."
    ),
    expected_output="Concise summary with context, objectives, and theory of change.",
    agent=context_analyst
)

rationale_task = Task(
    description=(
        f"Develop a 400-word problem analysis and justification. "
        f"Focus on the key humanitarian needs in {targetRegion} and "
        f"how the project aligns with funding priorities from {fundingOrg}."
    ),
    expected_output="Structured rationale with evidence and alignment with funding priorities.",
    agent=context_analyst
)

framework_task = Task(
    description=(
        f"Create a 600-word project description outlining the theory of change. "
        f"Describe the project logic, including activities, outputs, outcomes, "
        f"and expected impact over the {projectDuration} duration."
    ),
    expected_output="Detailed framework with activities-outputs-outcomes logic.",
    agent=design_lead
)

monitoring_task = Task(
    description=(
        f"Design a 350-word monitoring plan with indicators. "
        f"Ensure the M&E framework includes key performance indicators (KPIs), "
        f"data collection methods, and a strategy to measure progress within {budgetRange}."
    ),
    expected_output="Practical M&E framework with data collection methods and KPIs.",
    agent=m_e_specialist
)

# ================= CREW CONFIGURATION =================
proposal_crew = Crew(
    agents=[context_analyst, design_lead, m_e_specialist],
    tasks=[summary_task, rationale_task, framework_task, monitoring_task],    
    process=Process.hierarchical,  
    manager_llm=llm_azure,
    manager_agent=manager_agent,
    verbose=True
)

# ================= EXECUTION =================
result2 = proposal_crew.kickoff()
print("✅ Proposal 2 generated successfully!")
print(result2)  
```

# Third Iteration: Getting the expected format

Now let's ensure we follow the expected document structure by eliciting all the tasks.

```{python}
import os
from docx import Document
from crewai import Agent, Task, Crew, Process

# ================= PROJECT PARAMETERS =================
projectDescription = "Develop the usage of AI to improve IOM efficiency when drafting project proposals."
fundingOrg = "International Organization for Migration (IOM)"
projectDuration = "12 months"
budgetRange = "$130,000"
targetRegion = "Headquarter/Global"

# ================= AGENTS =================
manager_agent = Agent(
    role="Proposal Manager",
    goal="Oversee proposal quality and coherence",
    backstory=(
        f"You are an expert in humanitarian aid and grant writing. "
        f"You have 10+ years of experience drafting proposals and "
        f"know how to structure them for maximum impact. The project aims to {projectDescription} "
        f"with funding from {fundingOrg}."
    ),
    llm=llm_azure,
    verbose=True
)

context_analyst = Agent(
    role="Context Specialist",
    goal="Analyze project background and needs",
    backstory=f"Expert in UN humanitarian needs assessments for {targetRegion}.",
    llm=llm_azure,
    verbose=True
)

design_lead = Agent(
    role="Program Designer",
    goal="Develop project framework and logic",
    backstory=f"Program architect specializing in logical frameworks for {targetRegion}.",
    llm=llm_azure,
    verbose=True
)

m_e_specialist = Agent(
    role="M&E Coordinator",
    goal="Design monitoring and evaluation systems",
    backstory=f"Monitoring specialist with expertise in results-based management.",
    llm=llm_azure,
    verbose=True
)

budget_expert = Agent(
    role="Budget Specialist",
    goal="Prepare detailed budget for the project",
    backstory=f"Financial expert with experience in humanitarian project budgeting.",
    llm=llm_azure,
    verbose=True
)

risk_analyst = Agent(
    role="Risk Analyst",
    goal="Develop risk assessment plan",
    backstory=f"Risk management expert specializing in humanitarian projects.",
    llm=llm_azure,
    verbose=True
)

# ================= TASKS =================
tasks = [
    Task(
        description="Draft a 350-word project summary following IOM standards.",
        expected_output="Concise summary with context, objectives, and theory of change.",
        agent=context_analyst
    ),
    Task(
        description="Develop a 400-word project rationale with problem analysis and justification.",
        expected_output="Structured rationale with evidence and alignment with funding priorities.",
        agent=context_analyst
    ),
    Task(
        description="Write a 600-word project description outlining the theory of change.",
        expected_output="Detailed framework with activities-outputs-outcomes logic.",
        agent=design_lead
    ),
    Task(
        description="Define the roles and coordination arrangements for project partners.",
        expected_output="Clear description of partnership roles and coordination structures.",
        agent=design_lead
    ),
    Task(
        description="Develop a 350-word monitoring approach.",
        expected_output="Overview of how project indicators will be monitored.",
        agent=m_e_specialist
    ),
    Task(
        description="Develop a 350-word evaluation approach.",
        expected_output="Description of evaluation timing, criteria, and methodology.",
        agent=m_e_specialist
    ),
    Task(
        description="Create a results matrix including objectives, outcomes, outputs, and indicators.",
        expected_output="Formatted results table outlining project goals and measurement criteria.",
        agent=m_e_specialist
    ),
    Task(
        description="Develop a structured workplan with timeline and responsibilities.",
        expected_output="Formatted workplan table showing key activities and timelines.",
        agent=design_lead
    ),
    Task(
        description="Prepare a budget using an appropriate humanitarian project template.",
        expected_output="Detailed budget breakdown with expense categories.",
        agent=budget_expert
    ),
    Task(
        description="Develop a risk assessment plan outlining key risks and mitigation strategies.",
        expected_output="Formatted risk assessment table including treatment strategies.",
        agent=risk_analyst
    )
]

# ================= CREW CONFIGURATION =================
proposal_crew = Crew(
    agents=[context_analyst, design_lead, m_e_specialist, budget_expert, risk_analyst],
    tasks=tasks,
    process=Process.hierarchical,
    manager_llm=llm_azure,
    manager_agent=manager_agent,
    verbose=True
)

# ================= EXECUTION =================
result3 = proposal_crew.kickoff()

print("✅ Proposal 3 generated successfully!")
print(result3) 
```

Now we can save the results in a word document

```{python}
#| eval: false
# ================= SAVE OUTPUT TO WORD DOCUMENT =================
import json

def save_crew_output(crew_output, base_filename, output_folder):
    """Saves crew output to both JSON and Word formats."""
    # 1. Save raw JSON
    json_filename = os.path.join(output_folder, f"{base_filename}.json")
    with open(json_filename, 'w') as f:
        json.dump({
            "raw_output": crew_output.raw_output,
            "description": crew_output.description,
            "metadata": crew_output.metadata
        }, f, indent=2)
    
    # 2. Save to Word
    word_filename = os.path.join(output_folder, f"{base_filename}.docx")
    save_to_word(crew_output, word_filename)
    
    print(f"✅ Saved outputs to {json_filename} and {word_filename}")

# Usage
save_crew_output(result, "Final_Proposal")

from docx import Document
import os

def save_to_word(results, filename):
    """Saves the project proposal results to a Word document."""
    doc = Document()
    
    for section, content in results.items():
        doc.add_heading(section, level=1)  # Add section title
        
        if content is None:  
            content = ""  # Ensure content is a string
        
        if isinstance(content, list):  
            for item in content:
                if item is None:
                    item = ""
                doc.add_paragraph(str(item))  # Ensure every item is a string
        else:
            doc.add_paragraph(str(content))  # Convert content to string

    doc.save(filename)
    print(f"✅ Project Proposal saved to {filename}")

# Ensure the output folder exists
output_folder = "output"
os.makedirs(output_folder, exist_ok=True)

# Example: Save results to Word document
output_filename = os.path.join(output_folder, "Project_Proposal.docx")
save_to_word(results, output_filename)
 
```


# Conclusion

In this notebook, we have presented just the result of an initial exploration. More work is required and is in the making to get such system into production.

This requires a lot of experimentation in the definition of the different agents & tasks. For instance: 

- The knowledge from [IOM Project Handbook](https://publications.iom.int/system/files/pdf/iom_project_handbook_6feb2012.pdf) needs also to be more systematically extracted with [LlamaIndex Tool](https://docs.crewai.com/tools/llamaindextool), ideally through a Questions & Answers format to more strictly inform the specific task from each agents.

- In addition, the system can benefit from the integration of tools like [Google Serper Search](https://docs.crewai.com/tools/serperdevtool) or custom Machine Learning APIs (for instance to predict donors funding appetite based on existing data).

```{python}
#| eval: false
from crewai_tools import SerperDevTool

search_tool = SerperDevTool()

researcher = Agent(
    role='Researcher',
    tools=[search_tool],
    # ... (rest of the agent definition)
)
```
