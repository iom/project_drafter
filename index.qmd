---
title:  Using AI to draft Project Proposal
subtitle: Technical Approach Paper for Multi-Agent AI System
date: today
author: Edouard Legoupil, Chief Data Officer, IOM
format: quarto_iom_article-html
project:
  type: website
jupyter: python3
kernel: project_drafter_kernel  # Must match the name above
execute:
  engine: jupyter
  eval: true
toc: true
---

A Multi-Agent AI System is a computational framework where multiple autonomous agents interact to solve complex problems beyond the capability of individual agents. These systems are inspired by natural systems (e.g., human teams, ant colonies) and exhibit:

- __Autonomy__: Agents operate independently with their own goals and decision-making.

- __Decentralization__: No single point of control—coordination emerges through interaction.

- __Collaboration__: Agents communicate, negotiate, or compete to achieve objectives.

- __Scalability__: Tasks can be distributed dynamically across agents.

Multi-agent systems add significant value to AI-driven project proposal drafting by leveraging specialized agents to handle distinct tasks such as content generation, compliance checks, and reviews. 

This collaborative approach ensures high accuracy, efficiency, and scalability, resulting in polished and competitive proposals. By automating repetitive tasks and iteratively improving content, multi-agent systems enhance the overall quality and speed of the proposal drafting process.


# Introduction

This notebook is designed for the audience to understand the basics of multi-agents systems so that they can effectively contribute to the collaborative work required to create them. We use [CrewAI](https://www.crewai.com/), an open source framework for building autonomous AI agents that work together to accomplish tasks. Basically, the 4 key steps are:  

1. Define Your __Agents__: Agents are AI workers with roles, goals, and tools.

2. Create __Tasks__: Tasks define what each agent should do.

3. Assemble the __Crew__: Combine agents and tasks into a team.

4. Run the system: Execute and __kickoff__ the workflow.

------------------------------------------------------------------------

## Environment Set up

The body of this document targets a technical audience. Below are all the codes so that the whole process can be reproduced and audited. This assume to use the following code within [Visual Studio Code](https://code.visualstudio.com/).

First we need to use a virtual environment in Python development. This is essential for managing dependencies, avoiding conflicts, and ensuring reproducibility. It allows you to isolate project-specific libraries and versions, preventing interference with other projects or the global Python installation. This isolation helps maintain a clean development environment, simplifies project setup for collaborators, and enhances security by reducing the risk of introducing vulnerabilities. Overall, virtual environments provide a consistent and organized way to manage your Python projects effectively.

Make sure to install the last [stable version of python language](https://www.python.org/downloads/) and create a dedicated python environment to have a fresh install where to manage correctly all the dependencies between packages. To specify a particular version of Python when creating a virtual environment, you can use the full path to the desired Python executable. Here is how you can do it:

Open your terminal (Command Prompt, PowerShell, or any terminal emulator).

Navigate to your project directory where you want to create the virtual environment.

Run the following command to create a virtual environment,here called **`.venv`**:

- `python -m venv .venv`

Then, activate the virtual environment:

- `.\.venv\Scripts\activate`

Then, configure visual Studio Code to use the virtual environment: Open the Command Palette using the shortcut `Ctrl+Shift+P` and type `Jupyter: Select Interpreter` and select the interpreter that corresponds to your newly created virtual environment: `('venv': venv)`.

Once this environment selected as a kernel to run the notebook, we can install the required python modules the rest of the process:

```{python} 
#| eval: false
%pip install --upgrade --quiet  dotenv ## load env variable where I have API keys
%pip install --upgrade --quiet  langchain_openai ## use langchain LLM server
%pip install --upgrade --quiet  datatime
%pip install --upgrade --quiet  python_docx ## create word files
%pip install --upgrade --quiet  markdown ## work with markdown files
```

Install `CrewAI` and Explore the [documentation](https://docs.crewai.com/introduction)

```{python}
#| eval: false
%pip install --upgrade --quiet  crewai 
```

then Restart the jupyter kernel for this notebook
```{python}
#| eval: false
%reset -f
```

## Setting up LLM API 

### Using Azure Open AI

https://blog.crewai.com/configuring-azure-openai-with-crewai-a-comprehensive-guide/

Note that it is key to get the environment variable precisely [as expected by litellm](https://docs.litellm.ai/docs/providers/azure)

```{python}
import os
from dotenv import load_dotenv
# Load environment variables (Assuming you store API keys in a .env file)
load_dotenv()
 
# Set all required environment variables explicitly
os.environ["AZURE_API_TYPE"] = "azure"
os.environ["AZURE_API_BASE"] = os.getenv("AZURE_OPENAI_ENDPOINT")
os.environ["AZURE_API_KEY"] = os.getenv("AZURE_OPENAI_API_KEY")
os.environ["AZURE_API_VERSION"] = os.getenv("OPENAI_API_VERSION")
os.environ["AZURE_DEPLOYMENT_NAME"] = os.getenv("AZURE_DEPLOYMENT_NAME")

# Print all relevant variables for debugging
# Verify endpoint format - it MUST end with a forward slash
#print("AZURE_OPENAI_ENDPOINT:",  "set" if os.getenv("AZURE_OPENAI_ENDPOINT") else "not set")
#print("AZURE_OPENAI_API_KEY:", "set" if os.getenv("AZURE_OPENAI_API_KEY") else "not set")
#print("AZURE_DEPLOYMENT_NAME:", os.getenv("AZURE_DEPLOYMENT_NAME"))
#print("OPENAI_API_VERSION:", os.getenv("OPENAI_API_VERSION"))

# Configuring AzureChatOpenAI client...
from langchain_openai import AzureChatOpenAI
llm_azure = AzureChatOpenAI(
    azure_deployment=os.getenv("AZURE_DEPLOYMENT_NAME"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    api_version=os.getenv("OPENAI_API_VERSION") ,
    model=f"azure/{os.getenv('AZURE_DEPLOYMENT_NAME')}",
    max_retries=3,
    timeout=30,
  #  max_tokens=2000  # max possible..
    temperature=0.3,  # Adjust based on requirements
)
```

Checking if it works:

```{python}
response = llm_azure.invoke("""If you have to create a humanitarian project proposal, 
                               what are the key steps you would start and decision point
                              you need before starting writing the document?""")
print(response.content) 
```

Setting up API key can be an issue, use the below chunk for debugging.
```{python}
#| eval: false
from crewai import LLM
import os
import litellm
litellm._turn_on_debug()
azure_llm = LLM(
    model=f"azure/{os.getenv('AZURE_DEPLOYMENT_NAME')}",
)
azure_response = azure_llm.call(
    "If you have to create a humanitarian project proposal, what are the key steps you would start and decision point you need before starting writing the document?"
)
print(f'\nAzure Response:\n\n{azure_response}\n')
```

# First Iteration
To start with we define 2 agents that work in a sequential way, one is drafting the report and the second one review it.

## Build the crew

```{python}
from crewai import Crew, Agent, Task, Process

# ================= AGENTS =================
proposal_writer = Agent(
    role="Humanitarian Proposal Writer",
    llm= llm_azure,
    goal="Write compelling funding proposals for humanitarian projects",
    backstory=(
        "You are an expert in humanitarian aid and grant writing. "
        "You have 10+ years of experience drafting proposals"
        "and know how to structure them for maximum impact."
    ),
    verbose=True,
    allow_delegation=False
)

proposal_reviewer = Agent(
    role="Proposal Quality Assurance Specialist",
    llm=llm_azure,
    goal="Ensure proposals meet funding criteria, follows strict formatting and content requirements and are well-structured",
    backstory=(
        "You are a grant evaluator for major humanitarian organizations. "
        "You have a deep knowledge of donor expectations and proposal evaluation criteria."
        "You are meticulous about formatting, word limits, and logical flow."
        "You know exactly what funders look for and how to improve proposals."
    ),
    verbose=True,
    allow_delegation=False
)

# ================= TASKS =================
write_proposal = Task(
    description=(
        "Write a detailed project proposal for a humanitarian funding request. "
        "The project aims to provide develop the usage of AI to improve IOM efficiency when drafting project proposal. The target donor is IOM, budget would be 130k$ and duration one year. The project scope is global"
        "Include: Problem Statement, Objectives, Methodology, Budget, and Expected Impact."
    ),
    expected_output=(
        "A well-structured proposal document formatted as markdown with clear sections: "
        "1. Project Summary (350 words max)"
        "2. Rationale (400 words max)"
        "3. Project Description ( - 600 words max)"
        "4. Partnerships and Coordination (Stakeholder mapping, cross-cutting themes -350 words max)"
        "5. Monitoring (350 words max)"
        "6. Evaluation (350 words max)"
        "7. Results Matrix (Objective, Outcome, Output, Indicators - formated as a table)"
        "8. Workplan (formated as a table - with activities, beging and end date, focal point)"
        "9. Budget (formated as a table)"
        "10. Risk Assessment and treatment plan (formated as a table: risk, conseuqnece, likelihood, treatment)"
    ),
    agent=proposal_writer,
    output_file="output/version_1_project_document.md"
)

review_proposal = Task(
    description=(
        "Critically review the proposal draft and suggest improvements. "
        "Ensure that the theory of change is well articulated within the project description. "
        "Ensure clarity, alignment with donor expectations, and no errors."
    ),
    expected_output=(
        "A revised proposal with tracked changes and recommendations. "
        "A short summary of key improvements made."
    ),
    agent=proposal_reviewer,
)

# ================= CREW CONFIGURATION =================
crew = Crew(
    agents=[proposal_writer, proposal_reviewer],
    tasks=[write_proposal, review_proposal],
    process=Process.sequential,  # First write, then review
    verbose=True  
)

# ================= EXECUTION =================
result1 = crew.kickoff()
print("✅ Proposal 1 generated successfully!")
print(result1)
```

## Convert the report
The report has been saved as a markdown file. We can then easily convert it in different format (docx, html..) through the function below:

```{python}
import markdown
from docx import Document
from docx.shared import Pt, RGBColor, Inches
from docx.enum.table import WD_TABLE_ALIGNMENT, WD_ALIGN_VERTICAL
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml import parse_xml
from docx.oxml.ns import nsdecls
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from pathlib import Path
import os
import re

def convert_markdown_to_formats(md_file_path, output_dir="output"):
    """
    Convert a markdown file to both Word and HTML formats with professional table support.
    
    Args:
        md_file_path: Path to the input markdown file
        output_dir: Directory to save output files (default: "output")
    
    Returns:
        Dictionary with paths to generated files {'word': path, 'html': path}
    """
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Get base filename without extension
    base_name = Path(md_file_path).stem
    output_paths = {}
    
    try:
        # Read markdown content
        with open(md_file_path, 'r', encoding='utf-8') as f:
            md_content = f.read()
        
        # --- Convert to HTML ---
        html_content = markdown.markdown(md_content, extensions=['tables', 'fenced_code'])
        
        # Wrap in basic HTML structure
        full_html = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{base_name}</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }}
        h1, h2, h3 {{ color: #0033A0; }}
        code {{ background: #f8f9fa; padding: 2px 4px; border-radius: 4px; }}
        pre {{ background: #f8f9fa; padding: 10px; border-radius: 4px; overflow-x: auto; }}
        table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #f2f2f2; font-weight: bold; }}
    </style>
</head>
<body>
{html_content}
</body>
</html>"""
        
        # Save HTML
        html_path = os.path.join(output_dir, f"{base_name}.html")
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(full_html)
        output_paths['html'] = html_path
        
        # --- Convert to Word with advanced table support ---
        doc = Document()
        
        # Set default document styles
        style = doc.styles['Normal']
        font = style.font
        font.name = 'Calibri'
        font.size = Pt(11)
        
        # Process content line by line, detecting tables reliably
        lines = md_content.split('\n')
        current_table = []
        in_table = False
        current_paragraph = []
        
        for line in lines:
            # Check if we're starting a table
            if not in_table and line.strip().startswith('|') and '|' in line[1:]:
                if current_paragraph:  # Flush any pending paragraph content
                    doc.add_paragraph('\n'.join(current_paragraph))
                    current_paragraph = []
                in_table = True
                current_table = [line]
            elif in_table:
                # Continue collecting table lines until we hit a non-table line
                if line.strip().startswith('|') or line.strip().startswith('|-') or not line.strip():
                    current_table.append(line)
                else:
                    # Process the accumulated table
                    if len(current_table) >= 2:  # Need at least header and separator
                        process_markdown_table(doc, '\n'.join(current_table))
                    else:
                        # Not a valid table, add as regular text
                        doc.add_paragraph('\n'.join(current_table))
                    in_table = False
                    current_table = []
                    # Process the current non-table line
                    process_markdown_content(doc, line)
            else:
                # Regular content
                process_markdown_content(doc, line, current_paragraph)
        
        # Process any remaining content
        if in_table and len(current_table) >= 2:
            process_markdown_table(doc, '\n'.join(current_table))
        elif current_paragraph:
            doc.add_paragraph('\n'.join(current_paragraph))
        
        # Save Word document
        word_path = os.path.join(output_dir, f"{base_name}.docx")
        doc.save(word_path)
        output_paths['word'] = word_path
        
        print(f"✅ Converted {md_file_path} to:")
        print(f"  - Word: {word_path}")
        print(f"  - HTML: {html_path}")
        
        return output_paths
    
    except Exception as e:
        print(f"❌ Error converting {md_file_path}: {str(e)}")
        return None

def process_markdown_content(doc, content, current_paragraph=None):
    """Process regular markdown content (non-tables)"""
    if current_paragraph is None:
        current_paragraph = []
    
    if not content.strip() and not current_paragraph:
        return
        
    # Handle headings
    if content.startswith('# '):
        if current_paragraph:
            doc.add_paragraph('\n'.join(current_paragraph))
            current_paragraph = []
        heading = doc.add_heading(content[2:].strip(), level=1)
        apply_heading_style(heading)
    elif content.startswith('## '):
        if current_paragraph:
            doc.add_paragraph('\n'.join(current_paragraph))
            current_paragraph = []
        heading = doc.add_heading(content[3:].strip(), level=2)
        apply_heading_style(heading)
    elif content.startswith('### '):
        if current_paragraph:
            doc.add_paragraph('\n'.join(current_paragraph))
            current_paragraph = []
        heading = doc.add_heading(content[4:].strip(), level=3)
        apply_heading_style(heading)
    else:
        if content.strip() or current_paragraph:
            current_paragraph.append(content)

def apply_heading_style(heading):
    """Apply consistent heading styles"""
    heading.style.font.color.rgb = RGBColor(0x2A, 0x54, 0x8B)   # IOM blue
    heading.paragraph_format.space_after = Pt(6)
    heading.paragraph_format.space_before = Pt(12)

def process_markdown_table(doc, table_text):
    """Convert markdown table to Word table with proper handling of blank lines and formatting"""
    lines = [line.rstrip() for line in table_text.split('\n') if line.strip() or line == '']
    
    # Parse the table structure
    rows = []
    current_row = []
    in_multiline_cell = False
    
    for line in lines:
        if not line.strip():
            # Blank line - continue current cell if we're in a multiline cell
            if in_multiline_cell and current_row:
                current_row[-1] += '\n'
            continue
            
        if line.startswith('|') and line.endswith('|'):
            # Standard table row
            cells = [cell.strip() for cell in line[1:-1].split('|')]
            if not in_multiline_cell:
                current_row = cells
                rows.append(current_row)
            else:
                # Continuation of multiline cell
                for i, cell in enumerate(cells):
                    if i < len(current_row):
                        current_row[i] += '\n' + cell
                in_multiline_cell = False
        elif line.startswith('|---'):
            # Skip separator lines but mark that we have a header
            continue
        else:
            # Content that belongs to a multiline cell
            if rows and current_row:
                for i in range(len(current_row)):
                    current_row[i] += '\n' + line
                in_multiline_cell = True
    
    # Filter out empty rows and validate
    rows = [row for row in rows if any(cell.strip() for cell in row)]
    if not rows or not any(rows):
        doc.add_paragraph(table_text)
        return
    
    # Create Word table
    num_cols = max(len(row) for row in rows)
    table = doc.add_table(rows=len(rows), cols=num_cols)
    
    # Apply table styling
    tbl = table._tbl
    tblPr = tbl.tblPr
    tblBorders = OxmlElement('w:tblBorders')
    for border_name in ['top', 'left', 'bottom', 'right', 'insideH', 'insideV']:
        border = OxmlElement(f'w:{border_name}')
        border.set(qn('w:val'), 'single')
        border.set(qn('w:sz'), '4')
        border.set(qn('w:space'), '0')
        border.set(qn('w:color'), '000000')
        tblBorders.append(border)
    tblPr.append(tblBorders)
    
    # Populate table cells
    for i, row in enumerate(rows):
        for j in range(num_cols):
            cell_content = row[j] if j < len(row) else ""
            cell_content = clean_cell_content(cell_content)
            
            table.cell(i, j).text = cell_content
            table.cell(i, j).vertical_alignment = WD_ALIGN_VERTICAL.TOP
            
            # Header row formatting (if we had a separator line)
            if i == 0 and any('|---' in line for line in lines):
                table.cell(i, j).paragraphs[0].runs[0].bold = True
                shading_elm = table.cell(i, j)._tc.get_or_add_tcPr()
                shading_elm.append(parse_xml(
                    r'<w:shd {} w:fill="D3D3D3"/>'.format(nsdecls('w'))
                ))
            
            # Adjust column width based on content
            max_line_len = max(len(line) for line in cell_content.split('\n')) if cell_content else 0
            if max_line_len > 30:
                table.columns[j].width = Inches(2.5)
            elif max_line_len > 15:
                table.columns[j].width = Inches(1.75)
            else:
                table.columns[j].width = Inches(1.0)
    
    # Add spacing after table
    doc.add_paragraph()

def clean_cell_content(content):
    """Clean up markdown formatting in table cells"""
    # Remove any remaining markdown formatting
    content = re.sub(r'\[(.*?)\]\(.*?\)', r'\1', content)  # Remove links
    content = re.sub(r'\*\*(.*?)\*\*', r'\1', content)     # Remove bold
    content = re.sub(r'\*(.*?)\*', r'\1', content)         # Remove italic
    content = re.sub(r'`(.*?)`', r'\1', content)           # Remove code
    content = re.sub(r'<br\s*/?>', '\n', content)          # Convert <br> to newline
    
    # Clean up newlines
    lines = [line.strip() for line in content.split('\n')]
    return '\n'.join(filter(None, lines))
```


```{python}
convert_markdown_to_formats(md_file_path="output/version_1_project_document.md", output_dir="output")
```

## Review the report

```{=html}
<div class="embedded-content">
<iframe src="output/version_1_project_document.html" style="width: 100%; height: 500px; border: none;"></iframe>
</div>
```



# Conclusion

In this notebook, we have presented just the result of an initial exploration. More work is required and is in the making to get such system into production.

This requires a lot of experimentation in the definition of the different agents & tasks. For instance: 

- The knowledge from [IOM Project Handbook](https://publications.iom.int/system/files/pdf/iom_project_handbook_6feb2012.pdf) needs also to be more systematically extracted with [LlamaIndex Tool](https://docs.crewai.com/tools/llamaindextool), ideally through a Questions & Answers format to more strictly inform the specific task from each agents.

- In addition, the system can benefit from the integration of tools like [Google Serper Search](https://docs.crewai.com/tools/serperdevtool), and RAG tools to extract the standard indicators to use from IOM standard logframe, or to leverage learnings from [Evaluation Reports](https://edouard-legoupil.github.io/rag_extraction/) as well as custom Machine Learning APIs (for instance to [predict donors funding appetite](https://iom-dia-na.netlify.app/iom_dim) based on existing data).

```{python}
#| eval: false
from crewai_tools import SerperDevTool

search_tool = SerperDevTool()

researcher = Agent(
    role='Researcher',
    tools=[search_tool],
    # ... (rest of the agent definition)
)
```

Once we have reached acceptable results, we can just combine all of this into a python function and build an html/js interface to collect the parmeters from the users and output the results.

